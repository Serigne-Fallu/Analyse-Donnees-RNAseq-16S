library(dada2)
### IMPORTATION DES DONNEES:
```{r, echo=FALSE}
library(dada2)
path <- "C:/@BIOINF PROJETS/Analyse RNASeq 16S avec DADA2/16 FASTQ"
list.files(path)
path <- "C:/@BIOINF PROJETS/Analyse RNASeq 16S avec DADA2/16 FASTQ/"
list.files(path)
path <- choice.file()
path <- choose.files()
list.files(path)
path <- choose.dir()
list.files(path)
DataF <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))  # forward ou sens
DataR <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))  # reverse ou antisens
list.sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
DataF <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))  # forward ou sens
DataR <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))  # reverse ou antisens
list.sample.names <- sapply(strsplit(basename(DataF), "_"), `[`, 1)
list.sample.names
DataF <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))  # forward ou sens
DataR <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))  # reverse ou antisens
list.sample.names <- sapply(strsplit(basename(DataF), "_"), `[`, 1)
print(list.sample.names)
DataF <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))  # forward ou sens
DataR <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))  # reverse ou antisens
list.sample.names <- sapply(strsplit(basename(DataF), "_"), `[`, 1)
list.sample.names()
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))  # forward ou sens
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))  # reverse ou antisens
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
print(sample.names)
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))  # forward ou sens
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))  # reverse ou antisens
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
print(sample.names)
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))  # forward ou sens
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))  # reverse ou antisens
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
print(sample.names())
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))  # forward ou sens
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))  # reverse ou antisens
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
print(sample.names)
path <- choose.dir()
list.files(path)
path <- "C:\@BIOINF/ PROJETS\Analyse/ RNASeq/ 16S/ avec/ DADA2\16S/ FASTQ"
path <- "C:/@BIOINF \PROJETS/Analyse\ RNASeq\ 16S\ avec\ DADA2/16S\ FASTQ"
dadaFs <- dada(filtFs, err=errF, multithread=TRUE)  # recuperer les sequences foward uniques
library(dada2)
path <- choose.dir()
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))  # forward ou sens
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))  # reverse ou antisens
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
print(sample.names)
plotQualityProfile(fnFs[1:3])   # forward ou sens
plotQualityProfile(fnFs[4:6])   # reverse ou antisens
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(290,275), # coupure des reads, trimming
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
head(out)
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
plotErrors(errR, nominalQ=TRUE)
dadaFs <- dada(filtFs, err=errF, multithread=TRUE)  # recuperer les sequences foward uniques
dadaRs <- dada(filtRs, err=errR, multithread=TRUE)  # recuperer les sequences reverse uniques
mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
head(mergers[[1]])   # inspecter les donnees mergees  pour la premiere sequence
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
table(nchar(getSequences(seqtab)))  # inspecter la distibution des longeurs des sequences
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)
sum(seqtab.nochim)/sum(seqtab)
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
head(track)
taxa <- assignTaxonomy(seqtab.nochim, choose.files(), multithread=TRUE)
taxa <- assignTaxonomy(seqtab.nochim, choose.files(), multithread=TRUE)
taxa <- assignTaxonomy(seqtab.nochim, choose.files(), multithread=TRUE)
taxa.print <- taxa
rownames(taxa.print) <- NULL
head(taxa.print)
write.csv(taxa, file = "ASVs_taxonomy.csv")
saveRDS(taxa, "ASVs_taxonomy.rds")
write.csv(taxa, file = "ASVs_taxonomy.csv")
View(taxa)
write.csv(taxa, file = "ASVs_taxonomy.csv")
saveRDS(taxa, "ASVs_taxonomy.rds")
save.image("C:/@BIOINF PROJETS/Analyse RNASeq 16S avec DADA2/workspace.RData")
asv_headers = vector(dim(seqtab.nochim)[2], mode="character")
count.asv.tab = t(seqtab.nochim)
row.names(count.asv.tab) = sub(">", "", asv_headers)
write.csv(count.asv.tab, file = "ASVs_counts.csv")
saveRDS(count.asv.tab, file="ASVs_counts.rds")
View(count.asv.tab)
View(count.asv.tab)
View(seqtab.nochim)
View(taxa)
View(taxa.print)
View(taxa.print)
View(count.asv.tab)
write.csv(taxa.print, file = "ASVs_taxonomy.csv")
View(taxa)
View(taxa.print)
View(taxa)
library(phyloseq)
library(ggplot2)
library(dplyr)
install.packages("dplyr")
library(phyloseq)
library(ggplot2)
library(dplyr)
library(vegan)
library(phyloseq)
library(ggplot2)
library(dplyr)
library(vegan)
data_dada2 <- readRDS("ASVs_taxonomy.rds")
summary(data_dada2)
head(otu_table(data_dada2))
alpha_richness <- estimate_richness(data_dada2, measures = "Observed")
library(phyloseq)
library(ggplot2)
library(dplyr)
taxa <- readRDS("ASVs_taxonomy.rds")
count.asv.tab <- readRDS("ASVs_counts.rds")
physeq <- phyloseq(otu_table(count.asv.tab, taxa_are_rows=TRUE), taxa, sample_data(track))
physeq <- phyloseq(otu_table(count.asv.tab, taxa_are_rows=TRUE), taxa, sample_data(track))
physeq <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = TRUE), taxa, sample_data(track))
physeq <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = TRUE), taxa, sample_data(track))
View(track)
physeq <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = TRUE), taxa, sample_data(track))
physeq <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = TRUE), taxa, sample_data(track))
samples.out <- rownames(seqtab.nochim)
subject <- sapply(strsplit(samples.out, "D"), `[`, 1)
gender <- substr(subject,1,1)
subject <- substr(subject,2,999)
day <- as.integer(sapply(strsplit(samples.out, "D"), `[`, 2))
samdf <- data.frame(Subject=subject, Gender=gender, Day=day)
rownames(samdf) <- samples.out
View(samdf)
View(seqtab)
physeq <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = TRUE), taxa, sample_data(track))
View(count.asv.tab)
View(count.asv.tab)
View(count.asv.tab)
taxa.print = t(taxa.print)
write.csv(taxa.print, file = "ASVs_taxonomy.csv")
saveRDS(taxa, "ASVs_taxonomy.rds")
taxa.print = t(taxa.print)
write.csv(taxa.print, file = "ASVs_taxonomy.csv")
saveRDS(taxa, "ASVs_taxonomy.rds")
write.csv2(taxa.print, file = "ASVs_taxonomy.csv")
saveRDS(taxa, "ASVs_taxonomy.rds")
asv_headers = vector(dim(seqtab.nochim)[2], mode="character")
count.asv.tab = seqtab.nochim
row.names(count.asv.tab) = sub(">", "", asv_headers)
asv_headers = vector(dim(seqtab.nochim)[2], mode="character")
count.asv.tab = t(seqtab.nochim)
row.names(count.asv.tab) = sub(">", "", asv_headers)
write.csv(count.asv.tab, file = "ASVs_counts.csv")
saveRDS(count.asv.tab, file="ASVs_counts.rds")
taxa.print = data.frame(taxa.print, header=TRUE)
head(taxa.print)
taxa.print = data.frame(taxa.print, header=TRUE)
head(taxa.print$Genus)
taxa.print = data.frame(taxa.print, header=TRUE)
count.asv.tab = t(seqtab.nochim)
row.names(count.asv.tab) = taxa.print$Genus
write.csv(count.asv.tab, file = "ASVs_counts.csv")
taxa.print <- taxa
write.csv2(taxa.print, file = "ASVs_taxonomy.csv")
saveRDS(taxa, "ASVs_taxonomy.rds")
taxa.print <- taxa
rownames(taxa.print) <- NULL
write.csv2(taxa.print, file = "ASVs_taxonomy.csv")
saveRDS(taxa, "ASVs_taxonomy.rds")
View(seqtab.nochim)
taxa.print = data.frame(taxa.print)
count.asv.tab = t(seqtab.nochim)
row.names(count.asv.tab) = taxa.print$Genus
write.csv(count.asv.tab, file = "ASVs_counts.csv")
taxa.print = data.frame(taxa.print)
count.asv.tab = t(seqtab.nochim)
row.names(count.asv.tab) = list(taxa.print$Genus)
taxa.print = data.frame(taxa.print)
count.asv.tab = t(seqtab.nochim)
row.names(count.asv.tab) = str(taxa.print$Genus)
write.csv(count.asv.tab, file = "ASVs_counts.csv")
taxa.print = data.frame(taxa.print)
count.asv.tab = t(seqtab.nochim)
row.names(count.asv.tab) = taxa.print$Genus
write.csv2(count.asv.tab, file = "ASVs_counts.csv")
asv_headers = vector(dim(seqtab.nochim)[2], mode="character")
count.asv.tab = t(seqtab.nochim)
row.names(count.asv.tab) = sub(">", "", asv_headers)
write.csv(count.asv.tab, file = "ASVs_counts.csv")
saveRDS(count.asv.tab, file="ASVs_counts.rds")
asv_headers = vector(dim(seqtab.nochim)[2], mode="character")
count.asv.tab = t(seqtab.nochim)
row.names(count.asv.tab) = sub(">", "", asv_headers)
write.csv2(count.asv.tab, file = "ASVs_counts.csv")
saveRDS(count.asv.tab, file="ASVs_counts.rds")
taxa.print = data.frame(taxa.print)
count.asv.tab = t(seqtab.nochim)
row.names(count.asv.tab) = taxa.print$Genus
write.csv2(count.asv.tab, file = "ASVs_counts.csv")
taxa.print = data.frame(taxa.print)
count.asv.tab = t(seqtab.nochim)
row.names(count.asv.tab) = taxa.print$Genus
count.asv.tab = t(count.asv.tab)
write.csv2(count.asv.tab, file = "ASVs_counts.csv")
View(taxa)
View(taxa.print)
View(seqtab.nochim)
View(seqtab)
View(seqtab)
boxplot(count.asv.tab)
